name: Create Release

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - ".gitignore"

jobs:
  create-release:
    runs-on: windows-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Verify dist files exist
        run: |
          if (!(Test-Path -Path "dist/shadingway.addon") -or !(Test-Path -Path "dist/version.txt")) {
            Write-Error "Required files in dist directory not found. Please ensure dist/shadingway.addon and dist/version.txt are committed."
            exit 1
          }
          dir dist

      - name: Read version
        id: read_version
        run: |
          $VERSION = Get-Content -Path dist/version.txt -Raw
          $VERSION = $VERSION.Trim()
          echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "version=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create ZIP archive
        shell: powershell
        run: |
          $zipFileName = "Shadingway${{ env.VERSION }}.zip"
          Compress-Archive -Path "dist/shadingway.addon" -DestinationPath "dist/$zipFileName" -Force
          echo "ZIP file created: $zipFileName"

      - name: Fetch all tags
        run: |
          git fetch --tags origin

      - name: Check if tag exists
        id: check_tag
        run: |
          $tagName = "v${{ env.VERSION }}"
          $tagExists = $(git tag -l $tagName)
          if ($tagExists -eq $tagName) {
            echo "tag_exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            echo "tag_exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Create tag if needed
        if: steps.check_tag.outputs.tag_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"

      - name: Prepare release notes
        id: prepare_release
        run: |
          $templateContent = Get-Content -Path "./docs/template/release.md" -Raw
          $replacedContent = $templateContent -replace '\$\{VERSION\}', '${{ env.VERSION }}'
          
          # Get commit messages since last release tag for release notes
          $prevTag = git describe --tags --abbrev=0 --always 2>$null
          if ($LASTEXITCODE -ne 0) { $prevTag = "HEAD~10" }
          
          $releaseNotes = git log "${prevTag}..HEAD" --pretty=format:"- %s" | Where-Object { $_ -notmatch "Merge pull request" -and $_ -notmatch "Merge branch" }
          
          # If no meaningful commits, add a default message
          if (-not $releaseNotes) {
            $releaseNotes = "- Maintenance and stability improvements"
          }
          
          $replacedContent = $replacedContent -replace '\$\{RELEASE_NOTES\}', ($releaseNotes -join "`n")
          Set-Content -Path "./release_notes.md" -Value $replacedContent
          
          echo "notes_path=./release_notes.md" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create or update release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: Shadingway v${{ env.VERSION }}
          body_path: ${{ steps.prepare_release.outputs.notes_path }}
          draft: false
          prerelease: false
          files: |
            dist/Shadingway${{ env.VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}